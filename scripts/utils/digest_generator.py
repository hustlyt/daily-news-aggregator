from typing import List, Dict
from datetime import datetime
import pytz
import os


class DigestGenerator:
    """日报生成器"""

    def __init__(self, timezone: str = "Asia/Shanghai"):
        self.timezone = pytz.timezone(timezone)

    def generate_daily_digest(self, sources_data: Dict[str, Dict], output_path: str) -> bool:
        """生成每日汇总文档"""
        try:
            # 获取当前时间
            now = datetime.now(self.timezone)
            date_str = now.strftime('%Y-%m-%d')
            time_str = now.strftime('%Y-%m-%d %H:%M:%S')

            # 统计总的新增项目数
            total_new_items = sum(len(data['new_articles']) for data in sources_data.values())

            if total_new_items == 0:
                print("今日没有新增内容")
                return False

            # 生成Markdown内容
            markdown_content = self._generate_markdown(sources_data, date_str, time_str, total_new_items)

            # 确保输出目录存在
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            # 写入文件
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)

            print(f"每日汇总已生成: {output_path}")
            print(f"包含 {len(sources_data)} 个数据源，{total_new_items} 个新增项目")
            return True

        except Exception as e:
            print(f"生成每日汇总失败: {e}")
            return False

    def _generate_markdown(self, sources_data: Dict, date_str: str, time_str: str, total_items: int) -> str:
        """生成Markdown内容"""
        lines = [
            f"# 每日发现汇总 - {date_str}",
            "",
            f"> 本文档汇总了今日各大推荐网站的新增内容",
            ""
        ]

        # 为每个数据源添加内容
        for source_name, data in sources_data.items():
            config = data['config']
            new_articles = data['new_articles']

            if not new_articles:
                continue

            lines.extend([
                f"## {config['icon']} {config['display_name']} ({source_name})",
                ""
            ])

            # 添加每个新增项目
            for article in new_articles:
                lines.append(article.to_markdown())

            lines.append("")

        # 添加页脚信息
        lines.extend([
            "---",
            "",
            f"**更新时间**: {time_str}  ",
            f"**数据源**: {len([s for s in sources_data.values() if s['new_articles']])} 个网站  ",
            f"**新增项目**: {total_items} 个  ",
            "",
            "<!-- Generated by Daily News Aggregator -->"
        ])

        return "\n".join(lines)

    def get_output_filename(self, base_dir: str) -> str:
        """获取输出文件名"""
        now = datetime.now(self.timezone)
        date_str = now.strftime('%Y-%m-%d')
        return os.path.join(base_dir, f"daily-digest-{date_str}.md")